plugins {
    id 'java'
    id 'application'
    id 'maven-publish'
    id 'signing'
    id 'io.github.gradle-nexus.publish-plugin' version '2.0.0'
    //id "com.gradleup.shadow" version "8.3.6"
}

project.group = "de.hhu.stups"
project.version = "1.0.1-SNAPSHOT"
final isSnapshot = project.version.endsWith("-SNAPSHOT")

final snapshotsRepoUrl = "https://central.sonatype.com/repository/maven-snapshots/"
final releasesStagingRepoUrl = "https://ossrh-staging-api.central.sonatype.com/service/local/"
repositories {
    mavenCentral()
    if (isSnapshot) {
        maven {
            name = "Sonatype snapshots"
            url = snapshotsRepoUrl
        }
    }
}

dependencies {
    implementation group: "de.hhu.stups", name: "bparser", version: "2.15.2"
    implementation group: "ch.qos.logback", name: "logback-classic", version: "1.5.18"
    implementation group: 'commons-cli', name: 'commons-cli', version: '1.9.0'
    implementation group: 'org.glassfish.jaxb', name: 'xsom', version: '4.0.5'

    testImplementation platform('org.junit:junit-bom:5.13.1')
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter'
    testImplementation group: 'org.junit.platform', name: 'junit-platform-launcher'
    testImplementation group: "de.hhu.stups", name: "prob-java", version: "4.15.0"
}

java {
    sourceCompatibility = JavaVersion.VERSION_11

    withSourcesJar()
    withJavadocJar()
}

tasks.test {
    useJUnitPlatform()
}

application {
    mainClass = "de.hhu.stups.xml2b.cli.XML2BCli"
}

/*
shadowJar {
    archiveFileName = 'XML2B.jar'
    manifest {
        attributes(
                'Main-Class': application.mainClass.get(),
                'Translate-Class': "de.hhu.stups.xml2b.XML2B"
        )
    }
}
*/

processResources {
    filesMatching("de/hhu/stups/xml2b/build.properties") {
        expand(version: project.version, commit: readCurrentGitCommit())
    }
}

def readCurrentGitCommit() {
    def proc = ["git", "rev-parse", "HEAD"].execute(null, project.projectDir)
    def exitCode = proc.waitFor()
    if (exitCode != 0) {
        throw new IllegalStateException("git rev-parse command exited with status code ${exitCode}:\n" + proc.err.readLines().join("\n"))
    }
    return proc.in.readLines()[0]
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            pom {
                name = "XML2B"
                description = "XML2B"
                url = 'https://gitlab.cs.uni-duesseldorf.de/stups/prob/xml2b'

                licenses {
                    license {
                        name = 'Eclipse Public License, Version 1.0'
                        url = 'http://www.eclipse.org/org/documents/epl-v10.html'
                    }
                }

                scm {
                    connection = 'scm:git:https://gitlab.cs.uni-duesseldorf.de/stups/prob/xml2b.git'
                    developerConnection = 'scm:git:git@gitlab.cs.uni-duesseldorf.de:stups/prob/xml2b.git'
                    url = 'https://gitlab.cs.uni-duesseldorf.de/stups/prob/xml2b'
                }

                developers {
                    developer {
                        id = 'gruteser'
                        name = 'Jan Gruteser'
                        email = 'jan.gruteser@hhu.de'
                    }
                }
            }
        }
    }
}

nexusPublishing {
    repositories {
        mavenCentral {
            snapshotRepositoryUrl.set(uri(snapshotsRepoUrl))
            nexusUrl.set(uri(releasesStagingRepoUrl))
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

ext."signing.secretKeyRingFile" = rootProject.file("secring.gpg").absolutePath